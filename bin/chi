#!/bin/bash
set -e -u -o pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]:-${(%):-%x}}" )" && pwd )"

registry="docker.chameleoncloud.org"
suppress_warnings="${CHI_SUPPRESS_WARNINGS:-no}"
arch="$(uname -m)"

# Shortcut for subcommands
case "${1:-}" in
  docs)
    shift # past command
    exec docker run --rm "$registry/chi-docs" "$@"
    exit $?
    ;;
  update)
    for image in chi-docs chi-openstack; do
      printf "Updating $image command... "
      image_fqdn="$registry/$image-${arch}"
      docker pull "$image_fqdn" >/dev/null || break
      printf "($(docker inspect "$image_fqdn" -f 'created={{.Created}}'))\n"
    done
    exit $?
    ;;
  *)
    ;;
esac

cloud="${1:-}"
[ -n "$cloud" ] || {
  cat <<'USAGE'
chi: CLI helper for Chameleon

Execute:
  chi CLOUD CMD: Execute CMD against the cloud configuration identified by CLOUD.
    Any OpenStack client e.g., `openstack` or `blazar` can be run in this way.
    There are also a series of custom helper scripts that summarize or perform
    actions on the testbed. Running with no CMD opens an interactive shell.

  # Open interactive shell for <cloud>
  chi <cloud>
  # List projects for <cloud> cloud
  chi <cloud> openstack project list
  # Inspect a Keystone token on UC cloud
  chi <cloud> token-inspect TOKEN
Subcommands: invoke with -h to see additional usage info.
  chi docs: Documentation search.
Update:
  chi update: Updates tool to latest version.
USAGE
  exit 1
}
shift # Past 'cloud' positional arg

password="${CHAMELEON_PASSWORD:-}"
if [ -z "$password" ]; then
  if ! command -v chameleon_password >/dev/null; then
    if [ "$suppress_warnings" != "yes" ]; then
      cat <<NOPASSWD
Could not find your Chameleon password!

Please ensure there is a chameleon_password() function
(which prints your Chameleon Cloud password) available
from your current shell and sub-shells.

For example:

  chameleon_password() {
    echo \"password\"
  }
  # export for use in sub-shells
  export -f chameleon_password

Alternatively you can provide an executable named
"chameleon_password" somewhere in \$PATH.

The function will be passed the name of the cloud as
its first argument, e.g. "chi_uc".

NOPASSWD
      exit 1
    fi
  else
    password="$(chameleon_password "$cloud")"
  fi
fi

if [ -z "${CHAMELEON_USER:-}" ]; then
  echo "Please set CHAMELEON_USER to your Chameleon username."
  exit 1
fi

docker_options=(--rm --interactive --tty)
docker_options+=(-e "OS_USERNAME=$CHAMELEON_USER")
docker_options+=(-e "OS_PASSWORD=$password")
docker_options+=(-e "OS_CLOUD=$cloud")

# Allow users to configure OpenStack through all supported environment variables
for var in $(env | grep '^OS_' | grep -v '^(OS_USERNAME|OS_PASSWORD|OS_CLOUD)'); do
  docker_options+=(-e "$var")
done

# If a clouds.yaml is provided, use it
# Else, OpenStack's default clouds.yaml will be used
# All valid configs will mounted in /etc/openstack/clouds.d/ in cc-openstack
if [ "${CHAMELEON_CONFIG+null}" = "null" ]; then
  i=0
  for config in "${CHAMELEON_CONFIG[@]}"; do
    public_config="${config%.*}-public.${config##*.}"
    if [ -f "$public_config" ]; then
      docker_options+=(-v "$public_config:/etc/openstack/clouds.d/clouds""$i""-public.yaml")
    fi
    docker_options+=(-v "$config:/etc/openstack/clouds.d/clouds""$i"".yaml")
    i=$((i+1))
  done
fi

docker_options+=(-v "$PWD:/host")
if [[ -z "${1:-}" ]]; then
  cmd="bash"
fi

exec docker run "${docker_options[@]}" "$registry/chi-openstack:latest" "${cmd:-$@}"
